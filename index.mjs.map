{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar format = require( '@stdlib/error-tools-fmtprodmsg' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmean( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator( 3.0 );\n* // returns 0.0\n*\n* mu = accumulator( 5.0 );\n* // returns 1.0\n*\n* mu = accumulator();\n* // returns 1.0\n*/\nfunction incrmmean( W ) {\n\tvar delta;\n\tvar buf;\n\tvar mu;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( '0e78T', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tmu = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn mu;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding mean is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmu = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the sample mean...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tmu = NaN;\n\t\t\t\t\t\tbreak; // mean is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = buf[ k ] - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current mean nor the incoming value are NaN, so we need to update the sample mean...\n\t\telse if ( isnan( mu ) === false ) {\n\t\t\tdelta = x - buf[ i ];\n\t\t\tmu += delta / W;\n\t\t}\n\t\t// Case: the current mean is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving arithmetic mean incrementally.\n*\n* @module @stdlib/stats-incr-mmean\n*\n* @example\n* var incrmmean = require( '@stdlib/stats-incr-mmean' );\n*\n* var accumulator = incrmmean( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator( 3.0 );\n* // returns 0.0\n*\n* mu = accumulator( 5.0 );\n* // returns 1.0\n*\n* mu = accumulator();\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar incrmmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmean;\n"],"names":["isPositiveInteger","require$$0","isPrimitive","isnan","require$$1","Float64Array","require$$2","format","require$$3","lib","W","delta","buf","mu","N","i","TypeError","x","k","arguments","length","NaN"],"mappings":";;oWAsBA,IAAIA,EAAoBC,EAAgDC,YACpEC,EAAQC,EACRC,EAAeC,EACfC,EAASC,EA8Gb,IC/EAC,EDEA,SAAoBC,GACnB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMf,EAAmBU,GACxB,MAAM,IAAIM,UAAWT,EAAQ,QAASG,IAOvC,OALAE,EAAM,IAAIP,EAAcK,GACxBG,EAAK,EACLE,GAAK,EACLD,EAAI,EAWJ,SAAsBG,GACrB,IAAIC,EACJ,GAA0B,IAArBC,UAAUC,OACd,OAAW,IAANN,EACG,KAEDD,EAMR,GAHAE,GAAKA,EAAE,GAAKL,EAGPP,EAAOc,GACXH,EAAIJ,EACJG,EAAKQ,SAGD,GAAKP,EAAIJ,EAGbG,IADAF,EAAQM,EAAIJ,IADZC,GAAK,QAKD,GAAKX,EAAOS,EAAKG,KAGrB,IAFAD,EAAI,EACJD,EAAKI,EACCC,EAAI,EAAGA,EAAIR,EAAGQ,IACnB,GAAKA,IAAMH,EAAI,CACd,GAAKZ,EAAOS,EAAKM,IAAQ,CACxBJ,EAAIJ,EACJG,EAAKQ,IACL,MAEDP,GAAK,EACLH,EAAQC,EAAKM,GAAML,EACnBA,GAAMF,EAAQG,QAKS,IAAhBX,EAAOU,KAChBF,EAAQM,EAAIL,EAAKG,GACjBF,GAAMF,EAAQD,GAKf,OADAE,EAAKG,GAAME,EACJJ"}